from functions import *
from random import randint, choices
from copy import *

def random_biased(dna, profile, k):
    kmers = []
    probs = []
    sum = 0
    weighted = []
    for i in range(0, (len(dna))):
        temp_kmer = dna[i:(i + k)]
        if len(temp_kmer) == k:
            kmers.append(temp_kmer)
            prob = test_kmer(temp_kmer, profile)
            probs.append(prob)
    for p in probs:
        sum += p
    for p in probs:
        weighted.append((p/sum))

    return choices(kmers, weighted)


def gibbs_sampler(dna, k, t, n):
    motifs = []
    ii = 0
    for ii in range(0, t):
        motifs.append(random_get(dna[ii], k))
    bestmotifs = motifs
    motifs_no_i = []
    for c in bestmotifs:
        motifs_no_i.append(c)
    for j in range(0, (n + 100)):
        pos = randint(0, (t-1))
        motifs_no_i.pop(pos)
        count_profile = get_blank_profile(k, 1)
        for m in motifs_no_i:
            update_count_profile(m, count_profile)
        prob_profile = calculate_prob_profile(count_profile, k)
        replacment_kmer = random_biased(dna[pos], prob_profile, k)
        motifs_no_i.insert(pos, replacment_kmer[0])
        if hamming_score(motifs_no_i) < hamming_score(bestmotifs):
            bestmotifs.clear()
            bestmotifs = deepcopy(motifs_no_i)
    return bestmotifs





dna = [

'GCAAGTTTGTCGGGGCATAAGATAGTATGTGTCGGACGTCGCTAATCGTCACAGTCGAGAGGTATATCTTCAGTAACGAAGAACTAAGAGAAATGTGGCATTCTGACTCAGCTGATGCTTTTTCCATGAAAGCCATAGGTCAGCCGATCGCGCCCGTCAACTTTGCCAATCTAAGTTTGAATTCATAAGCACGTGGGTTCAGAAAAATAGGATCGCAGATCCGAGCCTGTTGTTACGCCGACGTCTGAGCGACTTTTCTTATGGACGAGACGAGGCCATCACGCATATCACGCGAGAGCCTCAGCGCAAGTTTGTCGGGG',
'CATAAGATAGTATGTGTCGGACGTCGCTAATCGTCACAGTCGAGAGGTATATCTTCAGTAACGAAGAACTAAGAGAAATGTGGCATTCTGACTCAGCTGATGCTTTTTCCATGAAAGCCATAGGTCAGCCGATCGCGCCCGTCAACTTTGCCAATCTAAGTTTGAATTCATAAGCACGTGGGGCTGCGAGAATGCTGTTCAGAAAAATAGGATCGCAGATCCGAGCCTGTTGTTACGCCGACGTCTGAGCGACTTTTCTTATGGACGAGACGAGGCCATCACGCATATCACGCGAGAGCCTCAGCGCAAGTTTGTCGGGG',
'CGAGCTCAGCAAGATACCAAGCTCCGCGTGCCGGATTGTTGAGTTGACCGCATAAAGGCGAATTGAATGCTACTCTTGCCCGAGGCTAAAGGTACAACGCATTCAAAACCTATGACCACCGCCCCGGTCGGGACGATCCCCCTCCATTCGGGCGGGTACTGAATAGCGGATTCCCATATTTCACTCGTTCTTTTAGGACCATAGTTTAAACCTCCTAGGTTAGCGCCAGTTTAATCACTAGAAGAAGTCCCCTTCGTGATTGTTGCTGCGCGCAGAACCTCTCGACCGCCTCAACACTGAACGAACCAGGTTTATAGGAG',
'CTTACTCTCGGTTTACCGTTACTTGAACAACGCTCCCGGATTTACCGTTTGACCTACCAATCCCCTACTGGGGTATATGGGGCTTGCCTATGCTAACTCGATACGGTAAAGCCTCGGTGCTAGGTTTTGACTGCACTCGTGCTACAAATACTGCCCCAAGGTACGCCAGACTCGACACTCTGCCGCCTCATCGCGAATGCTAGAACAGGGGCGTCAAGAATGCTCCTGGTTTATCCAGACTGTCTAGTGGCCTCGGTCCGGCACGGGGGTACATACCATATCAGCCGGGGCCTTGTTACGTATTTAGTCAGTCTTTGGTT',
'CTTGCAGGTTTGTGTGTCATGCCATAACGGACTAATATGTTGGCGTCGTCTGTCGCACTTACTTGGCTTCCACCTACCTCTATGGAACCCACGCGAGCTTTACGAGTCACGGGGCAGAACGCTCGTTTGACTTAATGCTCCTAACCTACCTGAATAAAGCAACAGCTATACACTGTTTGCCCGATAGGAGTTATTGTGTCGTATGCCCCACACTGGCTGCAGGAGTGAAAAGTGTCGTGCTTTCACACCTAAGATGGAGATCTGTCGCCGCAACACCACGATGCGCTTATGAGAATGCTGCACCCCTTTCGATAGCAGAA',
'CTGAAGCCTCTTCCGTTAGCTCTAAACCTCTCACGTTATATAGAAAAATACCTCCGACGTGTAGTGAACAGCAGGTGTCTTGTTGTGGGCGAACAGGTGGCGATGAGAATAGAAGTCGCACCGAGCGGGTTCCCGCACTGGGAAGCGAACCTTAACGAGTGAGCCGCATTTAGACCCATAGCGCAGGTCTGCGATAATGTAGCCGTTGGGGGGGAGGATCTCGTAACGACAACAGGTCCCTCCCTGGGACTAACTTCGCTTCGGAAGGGGCCCTTACGTGGTGTACCGATGTGTCTGCATGTGTTCGAGTTCTACTGCGG',
'CCTTACAAGCTCGAGCGTCCCTTAGGAGTATGTTTGGCGGTGCCATGACCTTCCGAGACGGTCGTTTACGTGACTGCTTAGAGGAAAGAAGTCGAACCGTCACTTCAAGCCCGCAGGCGGGAATTCATTATTACAGAGGTGTCCTTAATATGGAATTTGAGGCTACTTGTCTCCCAGTGTACCAGCTCTTGCTATCATATGGAATAAGGTTCCCACGAGAATCGCAGTCCTTATGGTACCCCTGTGGCGATGTATATGCTCACAAGACGGGCGCTCGAAGGGCATACACTAACTTGTCTTCGTCCGCCATACGATGTTCC',
'GGAAGATCAGTAGCGGAGTGCCGGTGACAAAACCGCTAAGACGCATATCTCTTATAGACTTCTGTCCACGAACGTTACTGGGTCCGCTCACGGGTGGTCGTGTTGCGTGACGCACGCTCCCATGCAACGAGTTCATAAAAACGTTCTTTGTCAAGTCCACTCGCTGGCGCTAGTACGCGCCAGATGCCGCTCTCTATTCAACGGCGTGTAGAACACTTCGGACGGTCGTTTCCTCGGACCGGAATAATAATAGGGGGGCGCAGATAATTACCATCGGCGATGAGGCGGCTTAATTGGGCTTTGCGACCGTTATCATGCCA',
'AACGGCACACGGACGGGGAGTCATCTTCTGTGTACGTCCCAATACGACCACCTGTTGTGGTCGATCAATGCGGCGATGAGAAGTGTTTAATAGCCCCCTCGTCTACCCCATCTTGAGAATCCCTCAACAATCACCTCACCTATGGGGGTGAGCTCAAGGCTATCAACTAGTCCTCCTCATCGGGCTATTCCTCTCAAGTTGTGCGTGGTTTGTGAGACTAAGAACAAGCCAGCAGCCATCACAAACCCTTATGAAGCTCGCGCAATTAACAACTCGCCTCACTAGCGTAGTTGTTTGGCTCAAATACCTTCCGGGCGACA',
'GTCTCTAACGTGGGGGCGTAGACGGAGTCAGTATCCCAAGGTACTGTGGCTGATTCGCTGGAAAGAGCAACGTGTAGCTACAGGAAGACCGTGGACCTTCGCTCATGTTGATTATACCAGACACAAGCCTTGACGTGGGTGGTGTGGTATAGCAGCTCCTCCTAAGGATGAGAATGCTTCTCAACCTAAGAGGCAGGCGAACGATGACAAAGCCAAGATGTGCTAAGAAAACCGACTGAACGTCACGCCATGACGCTACGGCCTTGTGCATCCACACCTTCAATCCAGGCGAATGACCAGACTCTATGGACCTAACTCGC',
'GGAAAGGTTTACACTGTTTTCGTTACGCAAGATGGTTCCGCCGTAGCCATGGTAGGAGCTAAACGAACATAACCACCCTGGAATTACCTCGGACCACCACGCGTGTGCTGGATCGGATAAAGCCATAATATTAGTATGTTGGGGCTTTTTTCATTAAGAAGTGTTCTCCACGCAGTGCAACAAAAAATTGCTCCTTGAAGGCATAAGCGTTGAAAGTACCCACGCTAGGTTATTTATTCCGGCGATGAGAGAACTCTTTGTAACTTTTAGACGCCAGAATATAAACACAGACTGTCTTTGTCCGGACTGGAAAGACAAGT',
'CGCTCGCCCCGCCCGAGTCAATGTGTTTCAAGTTTGAGACACAGGTGTCCCGTCACCCGGAGGCTTCCCTGTGGCTCGAATCAATACAGTTGAGTTGTCGTCCAACGGGATGCGTGTTAACAGGCGGCACACGTACGACAAAGAGCCCTTACTCCATGAGAAACAGACACTCTATGGCCTCCTCTGAGCGTATGGTGACTCGATAGTTTGAACAAGTACCATTATCTAGCTGCGATCCACAATTTCATGTGAACAGGTCTCACTCCAACCATACGGTCACTACTTGCAATACGTCTAGGCGAATTGAATGCTGCGCCGTA',
'TCAGAGGAGTGAGAGTCTACACATCTAGCCCTTATACGGAGGTTGCAAGGGGTGTGCCAACCGGCCACAAGGGGCGTACCCGTTTCAAAAATACTTCACTGCTCCCTTCTCGCTACTCTATGGTTACCAACATACTACTGGCTTGTGCAACCCTTGAATCTCTATGGCGACGTAACAACAGTGGGGAGGGGAGTCGACCGCATTTCCCACAATTGTCTGTAACGATGAGAATGCGCGTCTGGTATGAATCGTATTAAGTCGGATGTTGAGCTCGACGGGTCGTGTTAATACCCAGAGAAATCACCGCCGTTTATCAGGAC',
'TACCCTTTACTATGACGATATCGATGCTCAGAGTACTGCACTCGGGTCCTCGGTCGATCTGGTTGCTAATGAAAAGGCATAACGTCGACACCAATCGGAGTATGTAGATCCCCAATCTACGCGGAAGAGCTTGGGTTTTTGGCCAAATTGTCAACCTTTGCTAGTTTAACCGGAAATGTGGCTGGTCCATCAGGCCTGGAGAATGCTATCGTTATCCGGTGGATACAATACGTCTTGCGCCCCACAATGATTCGGTCATCGCACAGAGTTCCATGAACCCCGGGAATTCGCCATTAGTCAACCGCAGAATTAGGAAGCAG',
'GATACTAACTAGCTGAGGCGCCCAGAATGCTTGAGTGGGGAATGAATCAAGATGTACGATATTCCCGCCACGGTCTCGGAGTATGCGGAGATTCGTGCGCGAGGGCATCGCTTTTTTTTGTACACGGGGAAACTAGTCCCACGCGTAGAGTTTGCCGTACGGGGTGGACGCCAACCATTACGCTAGGAGTGCCCTTAGCCATCACTTTATTCGAATACCGGGCCAGCAGCTTCGGTACAAGGAAGACTCAATCAGCCCACTTAATCTGTGTAGAGAAACGACCGCTGCTTTCACGTGACTGTAGCCCTTATAACAGTAAC',
'CCATTCCTCTCGGTTCGGATTCAGTTCGCTCAGGAAGGTAGCCTGGTCGTTGACCGCTGGGCATTAAGCGTGCGGACTCTTTACCGGATTCTTCTGAAACGTATGTGTAAGCACAATATATAACTAAGTAAGAGATCGGATCGGTAGGCGCGTTCCCGCCCCTTAAAAGGAAATTAAATATCGACTAACCGTGGTAAGCGCTACGTGTCAATAGCAAGCCGTGGCCCAAGCTTGGGCACAACTGGGGCAGAATTCTTATTAGACGTAACAGATTAGGCCCACCTGGGGACAATCGATGCGATGAGAATGTCGCAGCCAAC',
'AGACCTCCTGGATCACGGCATCAATTATCCTGTCTTAAGTAGGCAGAAATGAATGAAGATCCGGTTTCGAGACGTCATAGGAGTAACAGCTGGAGACGCGCAAGTATGTTTGTTGCCCGGAGCCACCGTGTGTTGTGGGCATCCGAATTCGAATTGCATCCGGGTCGCTATACGTCCAATGAGACACGATGATGACCATGGCCTTGACGTCCTCCGTAATGATCCCGACACTTCTTATTGAGCGGCGATCTTAATGCTAAATTAGCTTACGTCTCCAGCTGTGGCATTGTACTCGTCCCCATGATCCATAAGCTCTTACC',
'TTATGATCACAACGAGCTCTTAGGCGATTCAAATGCTGGTAGTCATGGTTTGGCACGCTGGTTCTTTTATTTGGGCAGGGCACTGAAAAAGGAGTCGAACCTATTCGAAGTCAATGAGCTAGGATATTGTTTACTTTGGTATGAAAGCATTTCGCTCGGTCACCTTTGCGCTCTGACAGTCACTTGGACAGGTATACCTCGGTTGGCCTGTCTGCAATTTATCGCCTAGAAGTGCGTCCACGTGCCTCCGTTAATCCTGTCATCAACGGGGCGATCGGGCATCGCACCACAAATATCATGGTAACTGTCTGTACCTCCAG',
'CTTGCCGAATTTCCGGGAGGTTCAAACCAATGCTGTCCTTTGACTGGTGGATGTTACGGTATGTCATCGAACCTTACGGGTTAGCGCCGGAACGTGAGTGCCTTAACCCAACGGGTGTGAGAATGCTTGCATTCGGCAAGTCAAATATGCTTTTCGCACTGCCGGGGGATCGCAACTCCGGCTAGGTTTTACTCCACAGCGTCGCCATAATTCTACCAGTAGGCATAATAATATTTCAGAGATCATGGTGCGTACATCGTGGATGGAGGACATACGCCTAATTATGTAATCAACCTAGACAGCGGCGCTGTACGAGACAG',
'GCTGAGTGGCGATGATCCTGCTTCAGTCGAGTTTCCGCCCAGAGTTATACTAACTGACAGGTAAGCGCTGCCGGTCCAAATTCAAAATAATTAAGAACTCCGGCTTCATACAAGTAAGTCTAGGTTAACACTTAAAACGCATACTGTTTTCGGCTCCTCACGACACGCGTTATAGTTCTAGTGTTGCTCGCACAGTTGGGCCGCAAGCGTGGGGATAATGCCACGTCCCGGTCGGCTTAGCGCATAAACGGACTCCCAGTAAAATAGTCCTCGCCGCGTGCTTCATACCATTTAATAGTTGCCATGCCAATCCGTGTGAG',


]


k = 15
t = 20
n = 2000

topMotifs = []
x = 0
while x < t:
    test = dna[x]
    topMotifs.insert(x, test[0:k])
    x += 1


for i in range(0, 20):
    test = gibbs_sampler(dna, k, t, n)
    if hamming_score(test) < hamming_score(topMotifs):
        topMotifs = test
        print(hamming_score(topMotifs))
        print(topMotifs)
    print(i)
for i in topMotifs:
    print(i)
print(topMotifs)
